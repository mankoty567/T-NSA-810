"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var bodyParser = __importStar(require("body-parser"));
var cors_1 = __importDefault(require("cors"));
var express_1 = __importDefault(require("express"));
var helmet_1 = __importDefault(require("helmet"));
var morgan_1 = __importDefault(require("morgan"));
require("reflect-metadata");
var swagger_jsdoc_1 = __importDefault(require("swagger-jsdoc"));
var swaggerStats = __importStar(require("swagger-stats"));
var swaggerUi = __importStar(require("swagger-ui-express"));
var typeorm_1 = require("typeorm");
var routes_1 = __importDefault(require("./routes"));
var crypto_1 = require("crypto"); // Importing crypto methods for encryption
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
// Path to the log file
var logFilePath = path_1.default.join(__dirname, 'access.log');
var logFileStream = fs_1.default.createWriteStream(logFilePath, { flags: 'a' });
var options = {
    swaggerDefinition: {
        info: {
            title: 'Test API',
            version: '1.0.0',
            description: 'Test Express API with autogenerated swagger doc',
        },
    },
    apis: ['./routes/auth.js', './controller/Admin/*.js'],
};
var specs = swagger_jsdoc_1.default(options);
typeorm_1.createConnection()
    .then(function () {
    var app = express_1.default();
    // Middleware
    app.use(cors_1.default({
        origin: process.env.S_URL || '*',
        allowedHeaders: ['Content-Type'],
        credentials: true,
    }));
    app.use(swaggerStats.getMiddleware({}));
    app.use(helmet_1.default());
    app.use(bodyParser.json());
    // Custom Morgan tokens
    morgan_1.default.token('header-auth', function (req) { return req.headers.auth; });
    morgan_1.default.token('body', function (req) { return JSON.stringify(req.body); });
    // Function for encrypting logs
    var encryptLog = function (log) {
        var encryptionKey = Buffer.from(process.env.ENCRYPTED_KEY, 'hex'); // Get the encryption key from environment variables
        var iv = crypto_1.randomBytes(16);
        var cipher = crypto_1.createCipheriv('aes-256-cbc', encryptionKey, iv);
        var encryptedData = cipher.update(log, 'utf8', 'hex');
        encryptedData += cipher.final('hex');
        return iv.toString('hex') + ':' + encryptedData; // Store the iv along with the encrypted data
    };
    /* Will be removed in production
    // Getting the encryption key from environment variables (your example)
    const encryptionKey = Buffer.from(process.env.ENCRYPTED_KEY, 'hex');

    // Creating a decipher object
    const decipher = createDecipheriv('aes-256-cbc', encryptionKey, iv);

    // Decrypting the data
    let decryptedData = decipher.update(encryptedData, 'hex', 'utf8');
    decryptedData += decipher.final('utf8');

    console.log('Decrypted log:', decryptedData);*/
    // Middleware for writing encrypted logs
    app.use('/api*', morgan_1.default(function (tokens, req, res) {
        var startTime = Date.now(); // Record the start time of request processing
        // Build a structured log entry
        var logEntry = {
            date: tokens.date(req, res, 'web'),
            method: tokens.method(req, res),
            url: tokens.url(req, res),
            remoteAddr: tokens['remote-addr'](req, res),
            headerAuth: tokens['header-auth'](req, res),
            body: tokens.body(req, res),
        };
        console.log(logEntry);
        // Calculate response content length
        // Encrypt and write to log file
        var encryptedLog = encryptLog(JSON.stringify(logEntry));
        console.log(encryptLog);
        logFileStream.write(encryptedLog + '\n');
        // Event listener for request finish
    }));
    // Set up routes from routes folder
    app.use('/', routes_1.default);
    // Set up Swagger UI
    app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));
    // Start server
    var PORT = process.env.PORT || 3003;
    app.listen(PORT, function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            console.log("Server started on port " + PORT);
            return [2 /*return*/];
        });
    }); });
})
    .catch(function (error) {
    console.error('Failed to connect to database:', error);
});
