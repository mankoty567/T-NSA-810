import * as bodyParser from 'body-parser';
import cors from 'cors';
import express from 'express';
import helmet from 'helmet';
import morgan from 'morgan';
import 'reflect-metadata';
import swaggerJSDoc from 'swagger-jsdoc';
import * as swaggerStats from 'swagger-stats';
import * as swaggerUi from 'swagger-ui-express';
import { createConnection } from 'typeorm';
import routes from './routes';
import { createCipheriv, randomBytes } from 'crypto'; // Importing crypto methods for encryption
import fs from 'fs';
import path from 'path';

// Path to the log file
const logFilePath = path.join(__dirname, 'access.log');
const logFileStream = fs.createWriteStream(logFilePath, { flags: 'a' });

const options = {
  swaggerDefinition: {
    info: {
      title: 'Test API',
      version: '1.0.0',
      description: 'Test Express API with autogenerated swagger doc',
    },
  },
  apis: ['./routes/auth.js', './controller/Admin/*.js'],
};

const specs = swaggerJSDoc(options);

createConnection()
  .then(() => {
    const app = express();

    // Middleware
    app.use(cors({
      origin: process.env.S_URL || '*',
      allowedHeaders: ['Content-Type'],
      credentials: true,
    }));
    app.use(swaggerStats.getMiddleware({}));
    app.use(helmet());
    app.use(bodyParser.json());

    // Custom Morgan tokens
    morgan.token('header-auth', (req) => req.headers.auth);
    morgan.token('body', (req) => JSON.stringify(req.body));

    // Function for encrypting logs
    const encryptLog = (log) => {
      const encryptionKey = Buffer.from(process.env.ENCRYPTED_KEY, 'hex'); // Get the encryption key from environment variables
      const iv = randomBytes(16);
      const cipher = createCipheriv('aes-256-cbc', encryptionKey, iv);
      let encryptedData = cipher.update(log, 'utf8', 'hex');
      encryptedData += cipher.final('hex');
      return iv.toString('hex') + ':' + encryptedData; // Store the iv along with the encrypted data
    };

    /* Will be removed in production
    // Getting the encryption key from environment variables (your example)
    const encryptionKey = Buffer.from(process.env.ENCRYPTED_KEY, 'hex');

    // Creating a decipher object
    const decipher = createDecipheriv('aes-256-cbc', encryptionKey, iv);

    // Decrypting the data
    let decryptedData = decipher.update(encryptedData, 'hex', 'utf8');
    decryptedData += decipher.final('utf8');

    console.log('Decrypted log:', decryptedData);*/


    // Middleware for writing encrypted logs
    app.use('/api*',morgan((tokens, req, res) => {
      const startTime = Date.now(); // Record the start time of request processing

      // Build a structured log entry
      const logEntry = {
        date: tokens.date(req, res, 'web'),
        method: tokens.method(req, res),
        url: tokens.url(req, res),
        remoteAddr: tokens['remote-addr'](req, res),
        headerAuth: tokens['header-auth'](req, res),
        body: tokens.body(req, res),
      };
      console.log(logEntry);
      // Calculate response content length

      // Encrypt and write to log file
      const encryptedLog = encryptLog(JSON.stringify(logEntry));
      console.log(encryptLog);
      logFileStream.write(encryptedLog + '\n');
      // Event listener for request finish
    }));

    // Set up routes from routes folder
    app.use('/', routes);

    // Set up Swagger UI
    app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));

    // Start server
    const PORT = process.env.PORT || 3003;
    app.listen(PORT, async () => {
      console.log(`Server started on port ${PORT}`);

    });
  })
  .catch((error) => {
    console.error('Failed to connect to database:', error);
  });
